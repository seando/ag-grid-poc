{"ast":null,"code":"var _jsxFileName = \"/Users/seanrichter/work/ag-grid-poc/src/App.js\";\nimport React, { Component } from 'react'; // Import our theme overrides here\n\nimport './themes/Unqork.scss';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-enterprise';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nclass App extends Component {\n  constructor(props) {\n    // create cols, one for each letter\n    const columnDefs = [{\n      headerName: 'Country',\n      field: 'country',\n      enableRowGroup: true,\n      checkboxSelection: true,\n      headerCheckboxSelection: true,\n      filter: true,\n      filterParams: {\n        newRowsAction: 'keep',\n        resetButton: true,\n        applyButton: true\n      },\n      width: 200,\n      rowDrag: true\n    }].concat('ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('').map(letter => ({\n      field: letter\n    }))); // create 100 rows, and fill with random numbers\n\n    const rowData = [];\n    const countries = ['United Kingdom', 'Ireland', 'United States', 'India', 'Brazil', 'China', 'Russia'];\n\n    for (let i = 0; i < 100; i++) {\n      const item = {};\n      item['country'] = countries[i % countries.length];\n\n      for (let j = 1; j < columnDefs.length; j++) {\n        const colDef = columnDefs[j];\n        item[colDef.field] = Math.floor(Math.random() * 100000);\n      }\n\n      rowData.push(item);\n    }\n\n    super(props);\n    this.state = {\n      columnDefs,\n      rowData\n    };\n  }\n\n  render() {\n    const {\n      columnDefs,\n      rowData\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ag-theme-custom-react\",\n      style: {\n        height: '100%',\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(AgGridReact, {\n      autoGroupColumnDef: {\n        resizable: true,\n        cellRendererParams: {\n          checkbox: true\n        }\n      },\n      rowSelection: \"multiple\",\n      enableCharts: true,\n      rowDragManaged: true,\n      enableRangeSelection: true,\n      animateRows: true,\n      enableMultiRowDragging: true,\n      columnDefs: columnDefs,\n      rowData: rowData,\n      rowGroupPanelShow: \"always\",\n      pivotPanelShow: \"always\",\n      enableStatusBar: true,\n      sideBar: {\n        toolPanels: [{\n          id: 'columns',\n          labelDefault: 'Columns',\n          labelKey: 'columns',\n          iconKey: 'columns',\n          toolPanel: 'agColumnsToolPanel'\n        }, {\n          id: 'filters',\n          labelDefault: 'Filters',\n          labelKey: 'filters',\n          iconKey: 'filter',\n          toolPanel: 'agFiltersToolPanel'\n        }],\n        defaultToolPanel: null\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/seanrichter/work/ag-grid-poc/src/App.js"],"names":["React","Component","AgGridReact","FontAwesomeIcon","App","constructor","props","columnDefs","headerName","field","enableRowGroup","checkboxSelection","headerCheckboxSelection","filter","filterParams","newRowsAction","resetButton","applyButton","width","rowDrag","concat","split","map","letter","rowData","countries","i","item","length","j","colDef","Math","floor","random","push","state","render","height","resizable","cellRendererParams","checkbox","toolPanels","id","labelDefault","labelKey","iconKey","toolPanel","defaultToolPanel"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\n// Import our theme overrides here\nimport './themes/Unqork.scss';\n\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-enterprise';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nclass App extends Component {\n  constructor(props) {\n\n    // create cols, one for each letter\n    const columnDefs = [{\n        headerName: 'Country',\n        field: 'country',\n        enableRowGroup: true,\n        checkboxSelection: true,\n        headerCheckboxSelection: true,\n        filter: true,\n        filterParams: {\n            newRowsAction: 'keep',\n            resetButton: true,\n            applyButton: true\n        },\n        width: 200,\n        rowDrag: true\n    }].concat('ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('').map(letter => ({ field: letter })));\n\n    // create 100 rows, and fill with random numbers\n    const rowData = [];\n    const countries = ['United Kingdom', 'Ireland', 'United States', 'India', 'Brazil', 'China', 'Russia'];\n    for (let i = 0; i < 100; i++) {\n      const item = {};\n\n      item['country'] = countries[i % countries.length];\n\n      for (let j = 1; j < columnDefs.length; j++) {\n        const colDef = columnDefs[j];\n        item[colDef.field] = Math.floor(Math.random() * 100000);\n      }\n\n      rowData.push(item);\n    }\n\n    super(props);\n\n    this.state = {\n      columnDefs,\n      rowData\n    };\n  }\n\n  render() {\n    const { columnDefs, rowData } = this.state;\n    return (\n      <div className=\"ag-theme-custom-react\"\n        style={{\n          height: '100%',\n          width: '100%'\n        }}\n      >\n        <AgGridReact\n          autoGroupColumnDef={{\n            resizable: true,\n            cellRendererParams: {\n              checkbox: true\n            }\n          }}\n          rowSelection='multiple'\n          enableCharts={true}\n          rowDragManaged={true}\n          enableRangeSelection={true}\n          animateRows={true}\n          enableMultiRowDragging={true}\n          columnDefs={columnDefs}\n          rowData={rowData}\n          rowGroupPanelShow='always'\n          pivotPanelShow='always'\n          enableStatusBar={true}\n          sideBar={{\n            toolPanels: [\n              {\n                id: 'columns',\n                labelDefault: 'Columns',\n                labelKey: 'columns',\n                iconKey: 'columns',\n                toolPanel: 'agColumnsToolPanel',\n              },\n              {\n                id: 'filters',\n                labelDefault: 'Filters',\n                labelKey: 'filters',\n                iconKey: 'filter',\n                toolPanel: 'agFiltersToolPanel',\n              }\n            ],\n          defaultToolPanel: null\n        }}\n          >\n        </AgGridReact>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}